// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartOrder.Data;

#nullable disable

namespace SmartOrder.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250225074609_SeedDb")]
    partial class SeedDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.11")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("862a4dbf-578f-47c3-bdc6-647fc47f554b"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("16ec6ea3-9373-427d-b286-394ef4c6a9eb"),
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = new Guid("5f81af5c-f2f0-4a57-9f14-60c1261054fb"),
                            Name = "Waiter",
                            NormalizedName = "WAITER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("3c935a53-fa3f-4027-b0b8-f6801bb139ff"),
                            RoleId = new Guid("862a4dbf-578f-47c3-bdc6-647fc47f554b")
                        },
                        new
                        {
                            UserId = new Guid("c05ca829-7ea2-423f-b640-65c7c048ae01"),
                            RoleId = new Guid("5f81af5c-f2f0-4a57-9f14-60c1261054fb")
                        },
                        new
                        {
                            UserId = new Guid("e7c59aa2-2123-4806-90b8-4375ac71bc2a"),
                            RoleId = new Guid("5f81af5c-f2f0-4a57-9f14-60c1261054fb")
                        },
                        new
                        {
                            UserId = new Guid("5d959c9a-7e42-433c-bb04-1e49eedf6d81"),
                            RoleId = new Guid("5f81af5c-f2f0-4a57-9f14-60c1261054fb")
                        },
                        new
                        {
                            UserId = new Guid("19dd8116-4813-4cb0-b0ef-2266c7473c9a"),
                            RoleId = new Guid("16ec6ea3-9373-427d-b286-394ef4c6a9eb")
                        },
                        new
                        {
                            UserId = new Guid("3ba99fdf-87fb-46bf-8e9f-f11d01853cde"),
                            RoleId = new Guid("16ec6ea3-9373-427d-b286-394ef4c6a9eb")
                        },
                        new
                        {
                            UserId = new Guid("b73befbc-e44a-494b-9245-7e9750dc23a6"),
                            RoleId = new Guid("16ec6ea3-9373-427d-b286-394ef4c6a9eb")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SmartOrder.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("User full name.");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("VenueId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier of the site user/staff participate in.");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("VenueId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("c05ca829-7ea2-423f-b640-65c7c048ae01"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "1d55ff44-0388-4fd2-a06c-14cefa85388b",
                            Email = "waiter1@mail.com",
                            EmailConfirmed = false,
                            FullName = "First Waiter",
                            LockoutEnabled = false,
                            NormalizedEmail = "waiter1@mail.com",
                            NormalizedUserName = "waiter1@mail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAENKt69Qg+2+K+xaAS392n8pVMZO6av9/gE1M8DE7VX+trVATdP+VSBxlq7d+bbrxRw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "f69f971b-bbe4-475a-b9fe-afce9ec3f58b",
                            TwoFactorEnabled = false,
                            UserName = "waiter1@mail.com",
                            VenueId = new Guid("e064b0a4-a62d-41c2-a432-706ae8ff7439")
                        },
                        new
                        {
                            Id = new Guid("e7c59aa2-2123-4806-90b8-4375ac71bc2a"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a743ce9b-b6ba-4742-a82d-dd0af49645f2",
                            Email = "waiter2@mail.com",
                            EmailConfirmed = false,
                            FullName = "Second Waiter",
                            LockoutEnabled = false,
                            NormalizedEmail = "waiter2@mail.com",
                            NormalizedUserName = "waiter2@mail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAENiBMO7IDZgvsgFzj/89kj5thB/hWw/OZyV3fHbCLSP3dMzETOpuwu7wxRvv6o7b+w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "28399002-fbf3-4518-a6a2-1d058e26dab9",
                            TwoFactorEnabled = false,
                            UserName = "waiter2@mail.com",
                            VenueId = new Guid("962491b7-4643-46f9-bde3-cd4773fec737")
                        },
                        new
                        {
                            Id = new Guid("5d959c9a-7e42-433c-bb04-1e49eedf6d81"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "97c41630-e610-45aa-8b8f-f2ce71ff727b",
                            Email = "waiter3@mail.com",
                            EmailConfirmed = false,
                            FullName = "Third Waiter",
                            LockoutEnabled = false,
                            NormalizedEmail = "waiter3@mail.com",
                            NormalizedUserName = "waiter3@mail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEAk505+mEvEQHXhyQGZEWo4o4pyn07iVl4dieWfiVjO25gK7fhBSGBUNCTG1psnanA==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "46093405-fef3-4253-a29c-25bbb7462cfa",
                            TwoFactorEnabled = false,
                            UserName = "waiter3@mail.com",
                            VenueId = new Guid("02ab919c-96bc-4cce-a02b-dfc859e3a7df")
                        },
                        new
                        {
                            Id = new Guid("19dd8116-4813-4cb0-b0ef-2266c7473c9a"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "87c2ad98-ce77-4ae6-b25c-a3626b732808",
                            Email = "manager1@mail.com",
                            EmailConfirmed = false,
                            FullName = "First Manager",
                            LockoutEnabled = false,
                            NormalizedEmail = "manager1@mail.com",
                            NormalizedUserName = "manager1@mail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEMZ5bXFrZGMW0Xiy/l8doZiz8ymJG/SwbU9CakKSvZM96/qx5KKyagEoJJ7dUoH67w==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "2572c8d3-dd0e-458c-bd93-a7ac972cba9c",
                            TwoFactorEnabled = false,
                            UserName = "manager1@mail.com",
                            VenueId = new Guid("e064b0a4-a62d-41c2-a432-706ae8ff7439")
                        },
                        new
                        {
                            Id = new Guid("3ba99fdf-87fb-46bf-8e9f-f11d01853cde"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "18aea7e4-e83a-4a88-a9be-8fa3526665d0",
                            Email = "manager2@mail.com",
                            EmailConfirmed = false,
                            FullName = "Second Manager",
                            LockoutEnabled = false,
                            NormalizedEmail = "manager2@mail.com",
                            NormalizedUserName = "manager2@mail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEAA3chLtzjqmB9SgRS2hP7PFLDUw39QjTQUWskbuS9s+1he35ruocF8wB5TQkig7Hw==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "9964cdc4-4916-485c-95a7-16785bf10432",
                            TwoFactorEnabled = false,
                            UserName = "manager2@mail.com",
                            VenueId = new Guid("962491b7-4643-46f9-bde3-cd4773fec737")
                        },
                        new
                        {
                            Id = new Guid("b73befbc-e44a-494b-9245-7e9750dc23a6"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "f8a1b826-1dd6-4195-8e20-d32645cabfc0",
                            Email = "manager3@mail.com",
                            EmailConfirmed = false,
                            FullName = "Third Manager",
                            LockoutEnabled = false,
                            NormalizedEmail = "manager3@mail.com",
                            NormalizedUserName = "manager3@mail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEG6xDO7gOuYSB/Ya3PUc5esJZEgidubtwWsk0/qF1GsAyxxw337GzjuFCrqz7//YXQ==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "ca80806e-929e-4941-9332-ba614945a9ce",
                            TwoFactorEnabled = false,
                            UserName = "manager3@mail.com",
                            VenueId = new Guid("02ab919c-96bc-4cce-a02b-dfc859e3a7df")
                        },
                        new
                        {
                            Id = new Guid("3c935a53-fa3f-4027-b0b8-f6801bb139ff"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "2c32c72a-a92b-40d8-8196-4b0fe4816af9",
                            Email = "admin@mail.com",
                            EmailConfirmed = false,
                            FullName = "Great Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "admin@mail.com",
                            NormalizedUserName = "admin@mail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEGhZAM3j4oHc2ZldaIOW0CmfHsou8uBqOiPBACrOHahMAJ3KZ52eVRrC2JwZsAMkeg==",
                            PhoneNumberConfirmed = false,
                            SecurityStamp = "efc0d52e-b56f-42e0-865f-6fd24640b14c",
                            TwoFactorEnabled = false,
                            UserName = "admin@mail.com"
                        });
                });

            modelBuilder.Entity("SmartOrder.Data.Models.MenuCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Menu Category Identifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasComment("Description of the menu category.");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Name of the menu category.");

                    b.Property<Guid>("VenueId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Venue Identifier");

                    b.HasKey("Id");

                    b.HasIndex("VenueId");

                    b.ToTable("MenuCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("2b8f2d21-c406-496e-9527-ad81e0ccc3a4"),
                            Description = "Вкусни хапки за начало",
                            Title = "Предястия",
                            VenueId = new Guid("e064b0a4-a62d-41c2-a432-706ae8ff7439")
                        },
                        new
                        {
                            Id = new Guid("00c1d4c4-d659-4d46-8a96-3b87368a8cdf"),
                            Description = "Голямо разнообразие от ястия",
                            Title = "Основни",
                            VenueId = new Guid("e064b0a4-a62d-41c2-a432-706ae8ff7439")
                        },
                        new
                        {
                            Id = new Guid("2b093ff6-ad2a-4eba-863c-1b3ed8f1307d"),
                            Description = "Сладки изкушения",
                            Title = "Десерти",
                            VenueId = new Guid("e064b0a4-a62d-41c2-a432-706ae8ff7439")
                        },
                        new
                        {
                            Id = new Guid("baffdc08-a4a7-4f81-924d-12ee711bb070"),
                            Description = "Богато разнообразие от ароматни кафета и освежаващи напитки",
                            Title = "Кафе и напитки",
                            VenueId = new Guid("962491b7-4643-46f9-bde3-cd4773fec737")
                        },
                        new
                        {
                            Id = new Guid("6f50b246-508f-4393-a131-d7671424c58a"),
                            Description = "Леко и бързо хапване",
                            Title = "Закуски",
                            VenueId = new Guid("962491b7-4643-46f9-bde3-cd4773fec737")
                        },
                        new
                        {
                            Id = new Guid("e70fd979-6bd8-462c-a4ef-fcc19ecd18dc"),
                            Description = "Домашно приготвени десерти",
                            Title = "Десерти",
                            VenueId = new Guid("962491b7-4643-46f9-bde3-cd4773fec737")
                        },
                        new
                        {
                            Id = new Guid("fd0bd05f-9db6-403e-9650-d3cd8b1e2ff3"),
                            Description = "Голямо разнообразие от алкохолни изкушения",
                            Title = "Алкохолни напитки",
                            VenueId = new Guid("02ab919c-96bc-4cce-a02b-dfc859e3a7df")
                        },
                        new
                        {
                            Id = new Guid("32676ebc-ebbe-4466-a2e8-9e000c0487c2"),
                            Description = "Напитки без алкохол",
                            Title = "Безалкохолни напитки",
                            VenueId = new Guid("02ab919c-96bc-4cce-a02b-dfc859e3a7df")
                        },
                        new
                        {
                            Id = new Guid("7c9d5656-5716-4b51-9162-a686bb9c4dd8"),
                            Description = "Съпроводете напитките си с избор от лесни закуски",
                            Title = "Снаксове",
                            VenueId = new Guid("02ab919c-96bc-4cce-a02b-dfc859e3a7df")
                        });
                });

            modelBuilder.Entity("SmartOrder.Data.Models.MenuItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Menu item Identifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasComment("The description of the menu item.");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Optional image Url for the menu item.");

                    b.Property<Guid>("MenuCategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Item Category Identifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)")
                        .HasComment("The price of the item.");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("List of tags describing the item characteristics (e.g., spacy, sweet, vegan)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("The title of the menu item.");

                    b.HasKey("Id");

                    b.HasIndex("MenuCategoryId");

                    b.ToTable("MenuItems");

                    b.HasData(
                        new
                        {
                            Id = new Guid("4ed8e3fd-3d36-4856-8c2e-742e52fa47d6"),
                            Description = "Класическа българска салата с домати, краставици, лук, сирене и зехтин",
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/0/09/Chopska.jpg",
                            MenuCategoryId = new Guid("2b8f2d21-c406-496e-9527-ad81e0ccc3a4"),
                            Price = 7.50m,
                            Tags = "Салата, Вегетарианско",
                            Title = "Шопска салата"
                        },
                        new
                        {
                            Id = new Guid("413f3a4d-1e6c-4890-9c3b-7de120dfcf42"),
                            Description = "Печени гъби с чесън, мащерка и зехтин",
                            ImageUrl = "https://gotvach.bg/files/1200x800/pechurki-maslo-furna.webp",
                            MenuCategoryId = new Guid("2b8f2d21-c406-496e-9527-ad81e0ccc3a4"),
                            Price = 6.50m,
                            Tags = "Гъби, Вегетарианско",
                            Title = "Гъби на фурна"
                        },
                        new
                        {
                            Id = new Guid("150e9841-fc50-4969-97be-442225c4295f"),
                            Description = "Запечено свинско месо с картофи и подправки",
                            ImageUrl = "https://matekitchen.com/wp-content/uploads/2023/12/svinsko-s-kartofi.jpg",
                            MenuCategoryId = new Guid("00c1d4c4-d659-4d46-8a96-3b87368a8cdf"),
                            Price = 14.99m,
                            Tags = "Месо, Традиционно",
                            Title = "Свинско с картофи"
                        },
                        new
                        {
                            Id = new Guid("b3ece1b8-afc1-4823-b253-b3d18b306e38"),
                            Description = "Пилешко филе с ориз и зеленчуци",
                            ImageUrl = "https://lysp.eu/wp-content/uploads/2022/04/pile-s-oriz-big-1200x675.jpg",
                            MenuCategoryId = new Guid("00c1d4c4-d659-4d46-8a96-3b87368a8cdf"),
                            Price = 12.50m,
                            Tags = "Пиле, Лесно",
                            Title = "Пиле с ориз"
                        },
                        new
                        {
                            Id = new Guid("b5c1a145-0a2a-4fc1-a623-6f1d57fe67f4"),
                            Description = "Пъстърва на скара с лимон и зехтин",
                            ImageUrl = "https://matekitchen.com/wp-content/uploads/2019/09/CG012b_pystyrva-na-skara-s-limon-shalot-i-bilki.jpg",
                            MenuCategoryId = new Guid("00c1d4c4-d659-4d46-8a96-3b87368a8cdf"),
                            Price = 16.00m,
                            Tags = "Риба, Здравословно",
                            Title = "Риба на скара"
                        },
                        new
                        {
                            Id = new Guid("5f2d67cb-4698-485a-a84c-7c1cf8b1aa29"),
                            Description = "Шоколадова торта с ванилов крем и горски плодове",
                            ImageUrl = "https://sire-media-foxbg.fichub.com/24k_bg/clip-main/643955.1200x675.jpg",
                            MenuCategoryId = new Guid("2b093ff6-ad2a-4eba-863c-1b3ed8f1307d"),
                            Price = 6.99m,
                            Tags = "Торта, Шоколад",
                            Title = "Шоколадова торта"
                        },
                        new
                        {
                            Id = new Guid("a9d3da0a-55d9-41d0-8716-ed92cdfe9b71"),
                            Description = "Класически крем карамел с карамелен сос",
                            ImageUrl = "https://www.kulinarno-joana.com/wp-content/uploads/2011/05/DSC1671-2.jpg",
                            MenuCategoryId = new Guid("2b093ff6-ad2a-4eba-863c-1b3ed8f1307d"),
                            Price = 5.50m,
                            Tags = "Десерт, Крем",
                            Title = "Крем карамел"
                        },
                        new
                        {
                            Id = new Guid("767ca197-f4aa-45b4-baa0-5348d4f3709a"),
                            Description = "Палачинки с пълнозърнесто брашно, мед и счукани орехи",
                            ImageUrl = "https://www.bonapeti.bg/uploads/posts/post315.jpg",
                            MenuCategoryId = new Guid("2b093ff6-ad2a-4eba-863c-1b3ed8f1307d"),
                            Price = 7.00m,
                            Tags = "Палачинки, Сладко",
                            Title = "Палачинки с мед и орехи"
                        },
                        new
                        {
                            Id = new Guid("0b72bf0d-f3e3-4b2f-b2d3-46504d2ae863"),
                            Description = "Класическо еспресо с богат вкус",
                            ImageUrl = "https://cdn4.focus.bg/fakti/photos/big/83f/kakva-e-razlikata-mejdu-espreso-i-obiknoveno-kafe-1.jpg",
                            MenuCategoryId = new Guid("baffdc08-a4a7-4f81-924d-12ee711bb070"),
                            Price = 2.50m,
                            Tags = "Кафе, Класика",
                            Title = "Еспресо"
                        },
                        new
                        {
                            Id = new Guid("1716492d-6c3e-4dd6-a6e5-e97f90330794"),
                            Description = "Капучино с кремообразна пяна",
                            ImageUrl = "https://instantpot.bg/wp-content/uploads/instantpot-recepta-capuccino.jpg",
                            MenuCategoryId = new Guid("baffdc08-a4a7-4f81-924d-12ee711bb070"),
                            Price = 3.50m,
                            Tags = "Кафе, Мляко",
                            Title = "Капучино"
                        },
                        new
                        {
                            Id = new Guid("abe2c759-8c25-4e05-b655-641f413dea68"),
                            Description = "Избор от зелен, черен и плодов чай",
                            ImageUrl = "https://natural.bg/wp-content/uploads/2022/10/%D0%B1%D0%B8%D0%BB%D0%BA%D0%BE%D0%B2-%D1%87%D0%B0%D0%B9-%D1%81%D1%80%D0%B5%D1%89%D1%83-%D1%81%D1%82%D0%B0%D1%80%D0%B0%D0%B5%D0%B5%D0%BD%D0%B5-1600x1068.jpg",
                            MenuCategoryId = new Guid("baffdc08-a4a7-4f81-924d-12ee711bb070"),
                            Price = 2.00m,
                            Tags = "Чай, Без кофеин",
                            Title = "Чай"
                        },
                        new
                        {
                            Id = new Guid("88488784-518f-48c2-9929-b7136cd78044"),
                            Description = "Сандвич с прошуто, сирене и рукола",
                            ImageUrl = "https://matekitchen.com/wp-content/uploads/2021/01/sandvich-proshuto-motsarela.jpg",
                            MenuCategoryId = new Guid("6f50b246-508f-4393-a131-d7671424c58a"),
                            Price = 6.50m,
                            Tags = "Сандвич, Леко",
                            Title = "Сандвич с прошуто"
                        },
                        new
                        {
                            Id = new Guid("e7c33eb1-12c8-4c53-a498-9230b61f2e06"),
                            Description = "Домашен кекс с шоколадови парченца",
                            ImageUrl = "https://gotvach.bg/files/1200x800/parcheta-keks-pudra.webp",
                            MenuCategoryId = new Guid("6f50b246-508f-4393-a131-d7671424c58a"),
                            Price = 3.00m,
                            Tags = "Кекс, Сладко",
                            Title = "Кекс"
                        },
                        new
                        {
                            Id = new Guid("ebc7fd70-fb87-4fda-8edb-67cc9117d579"),
                            Description = "Шоколадова торта с ванилов крем",
                            ImageUrl = "https://sire-media-foxbg.fichub.com/24k_bg/clip-main/643955.1200x675.jpg",
                            MenuCategoryId = new Guid("e70fd979-6bd8-462c-a4ef-fcc19ecd18dc"),
                            Price = 5.50m,
                            Tags = "Торта, Шоколад",
                            Title = "Шоколадова торта"
                        },
                        new
                        {
                            Id = new Guid("b5880533-8623-4044-8bdd-62dae306e331"),
                            Description = "Домашен сладолед с избор от вкусове",
                            ImageUrl = "https://www.lunchbox.eu/wp-content/uploads/2017/06/20170616-DSC_5625.jpg",
                            MenuCategoryId = new Guid("e70fd979-6bd8-462c-a4ef-fcc19ecd18dc"),
                            Price = 4.00m,
                            Tags = "Сладолед, Освежаващо",
                            Title = "Сладолед"
                        },
                        new
                        {
                            Id = new Guid("0d6dc994-aac0-4f83-abc8-ee3706bf758b"),
                            Description = "Българско червено вино, 150 мл",
                            ImageUrl = "",
                            MenuCategoryId = new Guid("fd0bd05f-9db6-403e-9650-d3cd8b1e2ff3"),
                            Price = 5.00m,
                            Tags = "Вино, Алкохол",
                            Title = "Червено вино"
                        },
                        new
                        {
                            Id = new Guid("0ac00a8e-5ff1-4f47-b2fa-103be1f74a26"),
                            Description = "Класически коктейл с текила и лайм",
                            ImageUrl = "",
                            MenuCategoryId = new Guid("fd0bd05f-9db6-403e-9650-d3cd8b1e2ff3"),
                            Price = 8.00m,
                            Tags = "Коктейл, Алкохол",
                            Title = "Маргарита"
                        },
                        new
                        {
                            Id = new Guid("94ce05cb-f697-4b03-b724-d466417d70ec"),
                            Description = "Пресно изстискан сок от портокал",
                            ImageUrl = "",
                            MenuCategoryId = new Guid("32676ebc-ebbe-4466-a2e8-9e000c0487c2"),
                            Price = 3.50m,
                            Tags = "Сок, Безалкохолно",
                            Title = "Сок от портокал"
                        },
                        new
                        {
                            Id = new Guid("ef5c6936-4c78-4536-9f44-b144352c7623"),
                            Description = "Домашна лимонада с мента и лимон",
                            ImageUrl = "",
                            MenuCategoryId = new Guid("32676ebc-ebbe-4466-a2e8-9e000c0487c2"),
                            Price = 4.00m,
                            Tags = "Лимонада, Освежаващо",
                            Title = "Лимонада"
                        },
                        new
                        {
                            Id = new Guid("1534dda9-dba6-423f-bb01-07cd42c71fed"),
                            Description = "Хрупкав чипс със сол",
                            ImageUrl = "",
                            MenuCategoryId = new Guid("7c9d5656-5716-4b51-9162-a686bb9c4dd8"),
                            Price = 2.00m,
                            Tags = "Чипс, Леко",
                            Title = "Чипс"
                        },
                        new
                        {
                            Id = new Guid("f29f965a-e5ca-4652-b8c9-ad7851a64367"),
                            Description = "Сирене и месни деликатеси",
                            ImageUrl = "",
                            MenuCategoryId = new Guid("7c9d5656-5716-4b51-9162-a686bb9c4dd8"),
                            Price = 10.00m,
                            Tags = "Сирене, Месо",
                            Title = "Плато с месо и сирена"
                        });
                });

            modelBuilder.Entity("SmartOrder.Data.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Order Identifier");

                    b.Property<Guid?>("AssignedWaiterId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Assigned Waiter Identifier");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment("Status of the order {e.g., Pending, Completed, Cancelled, …}");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Order table Identifier");

                    b.HasKey("Id");

                    b.HasIndex("AssignedWaiterId");

                    b.HasIndex("TableId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("SmartOrder.Data.Models.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Order item Identifier");

                    b.Property<bool>("IsServed")
                        .HasColumnType("bit")
                        .HasComment("Is item served by waiter");

                    b.Property<Guid>("MenuItemId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Menu Item Identifier");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Additional notes or comments about the item.");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Order Identifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("Quantity of the item ordered.");

                    b.HasKey("Id");

                    b.HasIndex("MenuItemId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("SmartOrder.Data.Models.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Table Identifier");

                    b.Property<int>("TableNumber")
                        .HasColumnType("int")
                        .HasComment("The number of the table");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Unique long length token for the table.");

                    b.Property<Guid>("VenueId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Venue Identifier");

                    b.HasKey("Id");

                    b.HasIndex("VenueId");

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0c4b8f6d-3ff8-4bc1-ad81-af6f6bbaa0a4"),
                            TableNumber = 1,
                            Token = "3cb9d411-e2d5-4d8f-a424-1e14c4d2c84e",
                            VenueId = new Guid("e064b0a4-a62d-41c2-a432-706ae8ff7439")
                        },
                        new
                        {
                            Id = new Guid("b70f8c02-3d62-4fd5-9910-bf7af85cb154"),
                            TableNumber = 2,
                            Token = "11b04407-018d-4365-9269-ad6324956b27",
                            VenueId = new Guid("e064b0a4-a62d-41c2-a432-706ae8ff7439")
                        },
                        new
                        {
                            Id = new Guid("73d095f0-f62b-46fe-863d-4bf8c0cb0423"),
                            TableNumber = 3,
                            Token = "eaa73804-4d39-4db4-b055-a834e2e56ab7",
                            VenueId = new Guid("e064b0a4-a62d-41c2-a432-706ae8ff7439")
                        },
                        new
                        {
                            Id = new Guid("531193df-9074-403d-9db7-172271a08574"),
                            TableNumber = 1,
                            Token = "b1f5fede-12d7-4b66-8f8d-1289cd8afcac",
                            VenueId = new Guid("962491b7-4643-46f9-bde3-cd4773fec737")
                        },
                        new
                        {
                            Id = new Guid("76fb1a1f-278a-497b-89e7-b30df3ca6c26"),
                            TableNumber = 2,
                            Token = "2167de98-341f-47e0-9d9e-430d043471a9",
                            VenueId = new Guid("962491b7-4643-46f9-bde3-cd4773fec737")
                        },
                        new
                        {
                            Id = new Guid("7594682c-d06f-429f-9c88-8b7ac72678e0"),
                            TableNumber = 3,
                            Token = "54ab4b84-cb97-4bd6-a84f-4f4137661b63",
                            VenueId = new Guid("962491b7-4643-46f9-bde3-cd4773fec737")
                        },
                        new
                        {
                            Id = new Guid("9183a517-c0ee-42be-9209-c01c20754e2f"),
                            TableNumber = 1,
                            Token = "5ba60774-dda4-46ad-9753-0480608ca78c",
                            VenueId = new Guid("02ab919c-96bc-4cce-a02b-dfc859e3a7df")
                        },
                        new
                        {
                            Id = new Guid("01ed4cad-b290-4b76-95a6-182a0bab682e"),
                            TableNumber = 2,
                            Token = "c2c04659-c756-4438-a4c6-ffebac448053",
                            VenueId = new Guid("02ab919c-96bc-4cce-a02b-dfc859e3a7df")
                        },
                        new
                        {
                            Id = new Guid("ec4fd383-6d5c-4d07-aeec-2d20f86578fa"),
                            TableNumber = 3,
                            Token = "80fdb8cc-fec2-42f1-b747-f4ac0ca67d4f",
                            VenueId = new Guid("02ab919c-96bc-4cce-a02b-dfc859e3a7df")
                        });
                });

            modelBuilder.Entity("SmartOrder.Data.Models.Venue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Venue Identifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("The city where the venue is located");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date when the venue was added.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Venue name");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Type of the venue(restaurant, pub, cafe, etc.)");

                    b.HasKey("Id");

                    b.ToTable("Venues");

                    b.HasData(
                        new
                        {
                            Id = new Guid("e064b0a4-a62d-41c2-a432-706ae8ff7439"),
                            City = "София",
                            CreatedOn = new DateTime(2025, 2, 25, 7, 46, 7, 728, DateTimeKind.Utc).AddTicks(3100),
                            Name = "Ресторант Балкан",
                            Type = "Ресторант"
                        },
                        new
                        {
                            Id = new Guid("962491b7-4643-46f9-bde3-cd4773fec737"),
                            City = "Пловдив",
                            CreatedOn = new DateTime(2025, 2, 25, 7, 46, 7, 728, DateTimeKind.Utc).AddTicks(3105),
                            Name = "Кафе Арома",
                            Type = "Кафене"
                        },
                        new
                        {
                            Id = new Guid("02ab919c-96bc-4cce-a02b-dfc859e3a7df"),
                            City = "Варна",
                            CreatedOn = new DateTime(2025, 2, 25, 7, 46, 7, 728, DateTimeKind.Utc).AddTicks(3122),
                            Name = "Бар Нощ",
                            Type = "Бар"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("SmartOrder.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("SmartOrder.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartOrder.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("SmartOrder.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartOrder.Data.Models.ApplicationUser", b =>
                {
                    b.HasOne("SmartOrder.Data.Models.Venue", "Venue")
                        .WithMany("Employees")
                        .HasForeignKey("VenueId");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("SmartOrder.Data.Models.MenuCategory", b =>
                {
                    b.HasOne("SmartOrder.Data.Models.Venue", "Venue")
                        .WithMany("MenuCategories")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("SmartOrder.Data.Models.MenuItem", b =>
                {
                    b.HasOne("SmartOrder.Data.Models.MenuCategory", "MenuCategory")
                        .WithMany("MenuItems")
                        .HasForeignKey("MenuCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuCategory");
                });

            modelBuilder.Entity("SmartOrder.Data.Models.Order", b =>
                {
                    b.HasOne("SmartOrder.Data.Models.ApplicationUser", "AssignedWaiter")
                        .WithMany("AssignedOrders")
                        .HasForeignKey("AssignedWaiterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartOrder.Data.Models.Table", "Table")
                        .WithMany("Orders")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedWaiter");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("SmartOrder.Data.Models.OrderItem", b =>
                {
                    b.HasOne("SmartOrder.Data.Models.MenuItem", "MenuItem")
                        .WithMany()
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("SmartOrder.Data.Models.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItem");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("SmartOrder.Data.Models.Table", b =>
                {
                    b.HasOne("SmartOrder.Data.Models.Venue", "Venue")
                        .WithMany("Tables")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("SmartOrder.Data.Models.ApplicationUser", b =>
                {
                    b.Navigation("AssignedOrders");
                });

            modelBuilder.Entity("SmartOrder.Data.Models.MenuCategory", b =>
                {
                    b.Navigation("MenuItems");
                });

            modelBuilder.Entity("SmartOrder.Data.Models.Order", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("SmartOrder.Data.Models.Table", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("SmartOrder.Data.Models.Venue", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("MenuCategories");

                    b.Navigation("Tables");
                });
#pragma warning restore 612, 618
        }
    }
}
