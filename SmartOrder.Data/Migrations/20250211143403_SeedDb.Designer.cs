// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartOrder.Data;

#nullable disable

namespace SmartOrder.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250211143403_SeedDb")]
    partial class SeedDb
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("7e6e3b03-8ff1-4354-bb28-ad3e19f2fc1d"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("9d23082d-d1dd-4b7c-908c-aec02891d981"),
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = new Guid("87d18b8b-5f82-4170-b5f8-c37d0b21c2b9"),
                            Name = "Waiter",
                            NormalizedName = "WAITER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("d70e1a51-f4c5-439a-9807-fa2f1224fe95"),
                            RoleId = new Guid("7e6e3b03-8ff1-4354-bb28-ad3e19f2fc1d")
                        },
                        new
                        {
                            UserId = new Guid("af23cbb6-538b-43de-874d-f2c55a674ed6"),
                            RoleId = new Guid("87d18b8b-5f82-4170-b5f8-c37d0b21c2b9")
                        },
                        new
                        {
                            UserId = new Guid("4567e5d2-0109-4cb1-876a-24e2648bddcd"),
                            RoleId = new Guid("87d18b8b-5f82-4170-b5f8-c37d0b21c2b9")
                        },
                        new
                        {
                            UserId = new Guid("53aff14c-edd6-4ac5-9f6e-8859f1d2bf0f"),
                            RoleId = new Guid("87d18b8b-5f82-4170-b5f8-c37d0b21c2b9")
                        },
                        new
                        {
                            UserId = new Guid("a3e41b62-dc64-421f-aee2-b0df7bae800c"),
                            RoleId = new Guid("9d23082d-d1dd-4b7c-908c-aec02891d981")
                        },
                        new
                        {
                            UserId = new Guid("d9c256a4-c001-4cd3-a96c-597b0dbf1e7f"),
                            RoleId = new Guid("9d23082d-d1dd-4b7c-908c-aec02891d981")
                        },
                        new
                        {
                            UserId = new Guid("5adb002a-d3ab-4d8c-bd4a-7e9306a8679c"),
                            RoleId = new Guid("9d23082d-d1dd-4b7c-908c-aec02891d981")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SmartOrder.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("User full name.");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("VenueId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier of the site user/staff participate in.");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("VenueId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("af23cbb6-538b-43de-874d-f2c55a674ed6"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "94ff32ab-c65f-4468-89a6-9d1f57ef386f",
                            Email = "waiter1@mail.com",
                            EmailConfirmed = false,
                            FullName = "First Waiter",
                            LockoutEnabled = false,
                            NormalizedEmail = "waiter1@mail.com",
                            NormalizedUserName = "waiter1@mail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEIrwubDSrHRWj+Br3SdM8z8nDUN3IKImiJ/XW7hF3M0xG08fnB3X6OoeuMB6slRQxA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "waiter1@mail.com",
                            VenueId = new Guid("5c6a03f7-073f-42d9-a7c6-2c6d5b8445eb")
                        },
                        new
                        {
                            Id = new Guid("4567e5d2-0109-4cb1-876a-24e2648bddcd"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e0fd0ac0-dd32-4798-998b-a48963cadee9",
                            Email = "waiter2@mail.com",
                            EmailConfirmed = false,
                            FullName = "Second Waiter",
                            LockoutEnabled = false,
                            NormalizedEmail = "waiter2@mail.com",
                            NormalizedUserName = "waiter2@mail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEC17FtqfkIruq02ao2Msw/how3rpgNSB/6I4U6BGZleQ655nPPayeCJau1gjTmYQCA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "waiter2@mail.com",
                            VenueId = new Guid("dbd888de-5c71-4c3b-bb7a-0664f826e8a0")
                        },
                        new
                        {
                            Id = new Guid("53aff14c-edd6-4ac5-9f6e-8859f1d2bf0f"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c6aa2efa-cc4c-4f66-aeaa-c44346301c27",
                            Email = "waiter3@mail.com",
                            EmailConfirmed = false,
                            FullName = "Third Waiter",
                            LockoutEnabled = false,
                            NormalizedEmail = "waiter3@mail.com",
                            NormalizedUserName = "waiter3@mail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEKEGv52QXjD/F4TrTHBCCRKb+neuJEpO68Ln0qPPi3H/rctD6tHKSOonrGNyPvK64g==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "waiter3@mail.com",
                            VenueId = new Guid("6747d4ca-fdd8-4fea-a1ce-84570e1398d5")
                        },
                        new
                        {
                            Id = new Guid("a3e41b62-dc64-421f-aee2-b0df7bae800c"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7c489039-2287-4c31-bc2f-c5ea6a5d040a",
                            Email = "manager1@mail.com",
                            EmailConfirmed = false,
                            FullName = "First Manager",
                            LockoutEnabled = false,
                            NormalizedEmail = "manager1@mail.com",
                            NormalizedUserName = "manager1@mail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEDMmel81Rfd3SqNS3yo/LJOpImkSywyXEDYRhzj8jLTfrniVP151NiB0fgXbsBNxzw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "manager1@mail.com",
                            VenueId = new Guid("5c6a03f7-073f-42d9-a7c6-2c6d5b8445eb")
                        },
                        new
                        {
                            Id = new Guid("d9c256a4-c001-4cd3-a96c-597b0dbf1e7f"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "c6b1a263-f57d-4570-9410-f0246d27e71e",
                            Email = "manager2@mail.com",
                            EmailConfirmed = false,
                            FullName = "Second Manager",
                            LockoutEnabled = false,
                            NormalizedEmail = "manager2@mail.com",
                            NormalizedUserName = "manager2@mail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEKJTgN6j8K4Vi02NRwUEgaqNi+zJYIRLFqwiuZon57TwqhrJg5i+p8S4cR1bA2qjOA==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "manager2@mail.com",
                            VenueId = new Guid("dbd888de-5c71-4c3b-bb7a-0664f826e8a0")
                        },
                        new
                        {
                            Id = new Guid("5adb002a-d3ab-4d8c-bd4a-7e9306a8679c"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e8f21cb0-cbd8-4b65-99ee-003f592d218e",
                            Email = "manager3@mail.com",
                            EmailConfirmed = false,
                            FullName = "Third Manager",
                            LockoutEnabled = false,
                            NormalizedEmail = "manager3@mail.com",
                            NormalizedUserName = "manager3@mail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEGaBHH7NntsfKL4JwptA/zpRI6oeBD9E2XEB9gNbC8uabsza12Y0ANbHNWyC2yFx5Q==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "manager3@mail.com",
                            VenueId = new Guid("6747d4ca-fdd8-4fea-a1ce-84570e1398d5")
                        },
                        new
                        {
                            Id = new Guid("d70e1a51-f4c5-439a-9807-fa2f1224fe95"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "7929eb68-c831-40ce-96db-98c27599be1f",
                            Email = "admin@mail.com",
                            EmailConfirmed = false,
                            FullName = "Great Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "admin@mail.com",
                            NormalizedUserName = "admin@mail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEOpbYTfMSQAr2M78FEIJt+9LlYDkiVJhoBSjjHmtd8W5VuKLPKSYjaSNre5aRaLMuw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "admin@mail.com"
                        });
                });

            modelBuilder.Entity("SmartOrder.Data.Models.MenuCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Menu Category Identifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasComment("Description of the menu category.");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Name of the menu category.");

                    b.Property<Guid>("VenueId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Venue Identifier");

                    b.HasKey("Id");

                    b.HasIndex("VenueId");

                    b.ToTable("MenuCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("3c0738de-f0a2-4cdd-99cf-4bef9d615507"),
                            Description = "Вкусни хапки за начало",
                            Title = "Предястия",
                            VenueId = new Guid("5c6a03f7-073f-42d9-a7c6-2c6d5b8445eb")
                        },
                        new
                        {
                            Id = new Guid("daf4f198-b850-45df-994e-d6d098ce3843"),
                            Description = "Голямо разнообразие от ястия",
                            Title = "Основни",
                            VenueId = new Guid("5c6a03f7-073f-42d9-a7c6-2c6d5b8445eb")
                        },
                        new
                        {
                            Id = new Guid("8ce3e761-9f19-49da-8436-6672d19e1eb4"),
                            Description = "Сладки изкушения",
                            Title = "Десерти",
                            VenueId = new Guid("5c6a03f7-073f-42d9-a7c6-2c6d5b8445eb")
                        },
                        new
                        {
                            Id = new Guid("fb63f3a2-501b-457b-891a-ceeae2a87366"),
                            Description = "Богато разнообразие от ароматни кафета и освежаващи напитки",
                            Title = "Кафе и напитки",
                            VenueId = new Guid("dbd888de-5c71-4c3b-bb7a-0664f826e8a0")
                        },
                        new
                        {
                            Id = new Guid("dd954961-abc9-4d5c-9afd-1f778a1b0ce3"),
                            Description = "Леко и бързо хапване",
                            Title = "Закуски",
                            VenueId = new Guid("dbd888de-5c71-4c3b-bb7a-0664f826e8a0")
                        },
                        new
                        {
                            Id = new Guid("1f099730-5cbe-4ec2-ae3f-7cda7fedc888"),
                            Description = "Домашно приготвени десерти",
                            Title = "Десерти",
                            VenueId = new Guid("dbd888de-5c71-4c3b-bb7a-0664f826e8a0")
                        },
                        new
                        {
                            Id = new Guid("a5ce9c7b-3a42-41e3-b077-a05fb5b59c40"),
                            Description = "Голямо разнообразие от алкохолни изкушения",
                            Title = "Алкохолни напитки",
                            VenueId = new Guid("6747d4ca-fdd8-4fea-a1ce-84570e1398d5")
                        },
                        new
                        {
                            Id = new Guid("2748dafd-9947-49ae-8069-b62eb96b0a8a"),
                            Description = "Напитки без алкохол",
                            Title = "Безалкохолни напитки",
                            VenueId = new Guid("6747d4ca-fdd8-4fea-a1ce-84570e1398d5")
                        },
                        new
                        {
                            Id = new Guid("9293d311-22ba-43d2-8e7e-437f60a34f13"),
                            Description = "Съпроводете напитките си с избор от лесни закуски",
                            Title = "Снаксове",
                            VenueId = new Guid("6747d4ca-fdd8-4fea-a1ce-84570e1398d5")
                        });
                });

            modelBuilder.Entity("SmartOrder.Data.Models.MenuItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Menu item Identifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasComment("The description of the menu item.");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Optional image Url for the menu item.");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit")
                        .HasComment("Indicator of the item availability.");

                    b.Property<Guid>("MenuCategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Item Category Identifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)")
                        .HasComment("The price of the item.");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("Quantity or portion size (e.g., grams, millilitres, pieces).");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("List of tags describing the item characteristics (e.g., spacy, sweet, vegan)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("The title of the menu item.");

                    b.HasKey("Id");

                    b.HasIndex("MenuCategoryId");

                    b.ToTable("MenuItems");

                    b.HasData(
                        new
                        {
                            Id = new Guid("0621024c-f777-454e-bede-6128bdd47016"),
                            Description = "Класическа българска салата с домати, краставици, лук, сирене и зехтин",
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/0/09/Chopska.jpg",
                            IsAvailable = true,
                            MenuCategoryId = new Guid("3c0738de-f0a2-4cdd-99cf-4bef9d615507"),
                            Price = 7.50m,
                            Quantity = 1,
                            Tags = "Салата, Вегетарианско",
                            Title = "Шопска салата"
                        },
                        new
                        {
                            Id = new Guid("145b8fdf-98b2-4f1c-8d22-5b0130577591"),
                            Description = "Печени гъби с чесън, мащерка и зехтин",
                            ImageUrl = "https://gotvach.bg/files/1200x800/pechurki-maslo-furna.webp",
                            IsAvailable = true,
                            MenuCategoryId = new Guid("3c0738de-f0a2-4cdd-99cf-4bef9d615507"),
                            Price = 6.50m,
                            Quantity = 1,
                            Tags = "Гъби, Вегетарианско",
                            Title = "Гъби на фурна"
                        },
                        new
                        {
                            Id = new Guid("f5a54884-7496-4785-8a3a-13de248ad20d"),
                            Description = "Запечено свинско месо с картофи и подправки",
                            ImageUrl = "https://matekitchen.com/wp-content/uploads/2023/12/svinsko-s-kartofi.jpg",
                            IsAvailable = true,
                            MenuCategoryId = new Guid("daf4f198-b850-45df-994e-d6d098ce3843"),
                            Price = 14.99m,
                            Quantity = 1,
                            Tags = "Месо, Традиционно",
                            Title = "Свинско с картофи"
                        },
                        new
                        {
                            Id = new Guid("ef895637-9079-4c47-8caa-e5fe7cab6f28"),
                            Description = "Пилешко филе с ориз и зеленчуци",
                            ImageUrl = "https://lysp.eu/wp-content/uploads/2022/04/pile-s-oriz-big-1200x675.jpg",
                            IsAvailable = true,
                            MenuCategoryId = new Guid("daf4f198-b850-45df-994e-d6d098ce3843"),
                            Price = 12.50m,
                            Quantity = 1,
                            Tags = "Пиле, Лесно",
                            Title = "Пиле с ориз"
                        },
                        new
                        {
                            Id = new Guid("230e5b91-38ad-480a-8d63-f8250c65d4e0"),
                            Description = "Пъстърва на скара с лимон и зехтин",
                            ImageUrl = "https://matekitchen.com/wp-content/uploads/2019/09/CG012b_pystyrva-na-skara-s-limon-shalot-i-bilki.jpg",
                            IsAvailable = true,
                            MenuCategoryId = new Guid("daf4f198-b850-45df-994e-d6d098ce3843"),
                            Price = 16.00m,
                            Quantity = 1,
                            Tags = "Риба, Здравословно",
                            Title = "Риба на скара"
                        },
                        new
                        {
                            Id = new Guid("d4d7e7ac-ac3d-4344-b2ab-d6bc53cac607"),
                            Description = "Шоколадова торта с ванилов крем и горски плодове",
                            ImageUrl = "https://sire-media-foxbg.fichub.com/24k_bg/clip-main/643955.1200x675.jpg",
                            IsAvailable = true,
                            MenuCategoryId = new Guid("8ce3e761-9f19-49da-8436-6672d19e1eb4"),
                            Price = 6.99m,
                            Quantity = 1,
                            Tags = "Торта, Шоколад",
                            Title = "Шоколадова торта"
                        },
                        new
                        {
                            Id = new Guid("aeccb218-29f9-4a31-8e3f-2e2e51a582be"),
                            Description = "Класически крем карамел с карамелен сос",
                            ImageUrl = "https://www.kulinarno-joana.com/wp-content/uploads/2011/05/DSC1671-2.jpg",
                            IsAvailable = true,
                            MenuCategoryId = new Guid("8ce3e761-9f19-49da-8436-6672d19e1eb4"),
                            Price = 5.50m,
                            Quantity = 1,
                            Tags = "Десерт, Крем",
                            Title = "Крем карамел"
                        },
                        new
                        {
                            Id = new Guid("ee86f4d6-6e39-4185-a899-43ea971612e7"),
                            Description = "Палачинки с пълнозърнесто брашно, мед и счукани орехи",
                            ImageUrl = "https://www.bonapeti.bg/uploads/posts/post315.jpg",
                            IsAvailable = true,
                            MenuCategoryId = new Guid("8ce3e761-9f19-49da-8436-6672d19e1eb4"),
                            Price = 7.00m,
                            Quantity = 1,
                            Tags = "Палачинки, Сладко",
                            Title = "Палачинки с мед и орехи"
                        },
                        new
                        {
                            Id = new Guid("2b535b82-cc93-40ee-bac3-39f0c8d9af72"),
                            Description = "Класическо еспресо с богат вкус",
                            ImageUrl = "https://cdn4.focus.bg/fakti/photos/big/83f/kakva-e-razlikata-mejdu-espreso-i-obiknoveno-kafe-1.jpg",
                            IsAvailable = true,
                            MenuCategoryId = new Guid("fb63f3a2-501b-457b-891a-ceeae2a87366"),
                            Price = 2.50m,
                            Quantity = 1,
                            Tags = "Кафе, Класика",
                            Title = "Еспресо"
                        },
                        new
                        {
                            Id = new Guid("cf2f2ff9-2540-4c38-8e13-f8031c33226a"),
                            Description = "Капучино с кремообразна пяна",
                            ImageUrl = "https://instantpot.bg/wp-content/uploads/instantpot-recepta-capuccino.jpg",
                            IsAvailable = true,
                            MenuCategoryId = new Guid("fb63f3a2-501b-457b-891a-ceeae2a87366"),
                            Price = 3.50m,
                            Quantity = 1,
                            Tags = "Кафе, Мляко",
                            Title = "Капучино"
                        },
                        new
                        {
                            Id = new Guid("78ebca75-52fa-428e-9f07-8cd23d3f6295"),
                            Description = "Избор от зелен, черен и плодов чай",
                            ImageUrl = "https://natural.bg/wp-content/uploads/2022/10/%D0%B1%D0%B8%D0%BB%D0%BA%D0%BE%D0%B2-%D1%87%D0%B0%D0%B9-%D1%81%D1%80%D0%B5%D1%89%D1%83-%D1%81%D1%82%D0%B0%D1%80%D0%B0%D0%B5%D0%B5%D0%BD%D0%B5-1600x1068.jpg",
                            IsAvailable = true,
                            MenuCategoryId = new Guid("fb63f3a2-501b-457b-891a-ceeae2a87366"),
                            Price = 2.00m,
                            Quantity = 1,
                            Tags = "Чай, Без кофеин",
                            Title = "Чай"
                        },
                        new
                        {
                            Id = new Guid("6f2b76a1-6b7a-4c98-a7cd-2ffae4962476"),
                            Description = "Сандвич с прошуто, сирене и рукола",
                            ImageUrl = "https://matekitchen.com/wp-content/uploads/2021/01/sandvich-proshuto-motsarela.jpg",
                            IsAvailable = true,
                            MenuCategoryId = new Guid("dd954961-abc9-4d5c-9afd-1f778a1b0ce3"),
                            Price = 6.50m,
                            Quantity = 1,
                            Tags = "Сандвич, Леко",
                            Title = "Сандвич с прошуто"
                        },
                        new
                        {
                            Id = new Guid("752540f8-0c1d-463c-9033-4168b5bea312"),
                            Description = "Домашен кекс с шоколадови парченца",
                            ImageUrl = "https://gotvach.bg/files/1200x800/parcheta-keks-pudra.webp",
                            IsAvailable = true,
                            MenuCategoryId = new Guid("dd954961-abc9-4d5c-9afd-1f778a1b0ce3"),
                            Price = 3.00m,
                            Quantity = 1,
                            Tags = "Кекс, Сладко",
                            Title = "Кекс"
                        },
                        new
                        {
                            Id = new Guid("09ac32ee-dbf8-4c25-a00e-e9b9e42502a7"),
                            Description = "Шоколадова торта с ванилов крем",
                            ImageUrl = "https://sire-media-foxbg.fichub.com/24k_bg/clip-main/643955.1200x675.jpg",
                            IsAvailable = true,
                            MenuCategoryId = new Guid("1f099730-5cbe-4ec2-ae3f-7cda7fedc888"),
                            Price = 5.50m,
                            Quantity = 1,
                            Tags = "Торта, Шоколад",
                            Title = "Шоколадова торта"
                        },
                        new
                        {
                            Id = new Guid("47db107d-60a6-4814-827c-1487a8ac4c43"),
                            Description = "Домашен сладолед с избор от вкусове",
                            ImageUrl = "https://www.lunchbox.eu/wp-content/uploads/2017/06/20170616-DSC_5625.jpg",
                            IsAvailable = true,
                            MenuCategoryId = new Guid("1f099730-5cbe-4ec2-ae3f-7cda7fedc888"),
                            Price = 4.00m,
                            Quantity = 1,
                            Tags = "Сладолед, Освежаващо",
                            Title = "Сладолед"
                        },
                        new
                        {
                            Id = new Guid("03fd5a12-c0a2-4906-89af-1149c4f5a62f"),
                            Description = "Българско червено вино, 150 мл",
                            ImageUrl = "",
                            IsAvailable = true,
                            MenuCategoryId = new Guid("a5ce9c7b-3a42-41e3-b077-a05fb5b59c40"),
                            Price = 5.00m,
                            Quantity = 1,
                            Tags = "Вино, Алкохол",
                            Title = "Червено вино"
                        },
                        new
                        {
                            Id = new Guid("6a2e6acd-2d53-4ea5-b091-7a34af73a8a2"),
                            Description = "Класически коктейл с текила и лайм",
                            ImageUrl = "",
                            IsAvailable = true,
                            MenuCategoryId = new Guid("a5ce9c7b-3a42-41e3-b077-a05fb5b59c40"),
                            Price = 8.00m,
                            Quantity = 1,
                            Tags = "Коктейл, Алкохол",
                            Title = "Маргарита"
                        },
                        new
                        {
                            Id = new Guid("1b2b7192-87c8-4d3d-abb2-e0c3561ff93d"),
                            Description = "Пресно изстискан сок от портокал",
                            ImageUrl = "",
                            IsAvailable = true,
                            MenuCategoryId = new Guid("2748dafd-9947-49ae-8069-b62eb96b0a8a"),
                            Price = 3.50m,
                            Quantity = 1,
                            Tags = "Сок, Безалкохолно",
                            Title = "Сок от портокал"
                        },
                        new
                        {
                            Id = new Guid("3b0537dc-8109-4277-8a02-671f37eecdad"),
                            Description = "Домашна лимонада с мента и лимон",
                            ImageUrl = "",
                            IsAvailable = true,
                            MenuCategoryId = new Guid("2748dafd-9947-49ae-8069-b62eb96b0a8a"),
                            Price = 4.00m,
                            Quantity = 1,
                            Tags = "Лимонада, Освежаващо",
                            Title = "Лимонада"
                        },
                        new
                        {
                            Id = new Guid("98740609-281a-4cfc-a9dd-e12d458009c4"),
                            Description = "Хрупкав чипс със сол",
                            ImageUrl = "",
                            IsAvailable = true,
                            MenuCategoryId = new Guid("9293d311-22ba-43d2-8e7e-437f60a34f13"),
                            Price = 2.00m,
                            Quantity = 1,
                            Tags = "Чипс, Леко",
                            Title = "Чипс"
                        },
                        new
                        {
                            Id = new Guid("1094d9c4-2903-45b5-9f48-b6bd5266e7df"),
                            Description = "Сирене и месни деликатеси",
                            ImageUrl = "",
                            IsAvailable = true,
                            MenuCategoryId = new Guid("9293d311-22ba-43d2-8e7e-437f60a34f13"),
                            Price = 10.00m,
                            Quantity = 1,
                            Tags = "Сирене, Месо",
                            Title = "Плато с месо и сирена"
                        });
                });

            modelBuilder.Entity("SmartOrder.Data.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Order Identifier");

                    b.Property<int>("OrderStatus")
                        .HasColumnType("int")
                        .HasComment("Status of the order {e.g., Pending, Completed, Cancelled, …}");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Order table Identifier");

                    b.HasKey("Id");

                    b.HasIndex("TableId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("SmartOrder.Data.Models.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Order item Identifier");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Item name.");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Additional notes or comments about the item.");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Order Identifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("Quantity of the item ordered.");

                    b.Property<decimal>("UnitPrice")
                        .HasColumnType("decimal(18, 2)")
                        .HasComment("Price of a single unit of the item.");

                    b.HasKey("Id");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("SmartOrder.Data.Models.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Table Identifier");

                    b.Property<int>("TableNumber")
                        .HasColumnType("int")
                        .HasComment("The number of the table");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Unique long length token for the table.");

                    b.Property<Guid>("VenueId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Venue Identifier");

                    b.HasKey("Id");

                    b.HasIndex("VenueId");

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            Id = new Guid("b22c52e8-c7a6-47ff-b19b-dfac24e8b156"),
                            TableNumber = 1,
                            Token = "229b4016-3e38-4d56-8738-689825280470",
                            VenueId = new Guid("5c6a03f7-073f-42d9-a7c6-2c6d5b8445eb")
                        },
                        new
                        {
                            Id = new Guid("a780a125-2b46-4f06-8699-3c4d5c054896"),
                            TableNumber = 2,
                            Token = "36b8e443-8bbb-470f-aeac-9d3d9f3489c6",
                            VenueId = new Guid("5c6a03f7-073f-42d9-a7c6-2c6d5b8445eb")
                        },
                        new
                        {
                            Id = new Guid("36f0ed8c-51df-4a26-8782-97e9f5b277a5"),
                            TableNumber = 3,
                            Token = "d33b9493-cee3-4d6c-864d-c072820212a0",
                            VenueId = new Guid("5c6a03f7-073f-42d9-a7c6-2c6d5b8445eb")
                        },
                        new
                        {
                            Id = new Guid("0d81467d-d947-4a61-9d12-e2161bbfce30"),
                            TableNumber = 1,
                            Token = "21e1009a-ca10-4791-a0b9-e9d4cf8d50b4",
                            VenueId = new Guid("dbd888de-5c71-4c3b-bb7a-0664f826e8a0")
                        },
                        new
                        {
                            Id = new Guid("e69e2583-77d9-4acc-a715-e6b216cadc28"),
                            TableNumber = 2,
                            Token = "69ffa0d0-6cef-47c5-8d95-faffb12abc23",
                            VenueId = new Guid("dbd888de-5c71-4c3b-bb7a-0664f826e8a0")
                        },
                        new
                        {
                            Id = new Guid("7175cadb-8d2e-4cb8-ad2b-fe45f8f92d6f"),
                            TableNumber = 3,
                            Token = "4b94daac-2fef-46fa-ac3e-92f5c326dfb8",
                            VenueId = new Guid("dbd888de-5c71-4c3b-bb7a-0664f826e8a0")
                        },
                        new
                        {
                            Id = new Guid("43f70d70-bdb5-4eff-a9f7-f2eebe1c894f"),
                            TableNumber = 1,
                            Token = "cce15088-ec30-40e5-8b53-60ac1a538de2",
                            VenueId = new Guid("6747d4ca-fdd8-4fea-a1ce-84570e1398d5")
                        },
                        new
                        {
                            Id = new Guid("1b96e6c6-243f-4dad-bffb-7cdfeaeb30b6"),
                            TableNumber = 2,
                            Token = "664aa9b1-0aeb-46e3-a65a-94e781883daf",
                            VenueId = new Guid("6747d4ca-fdd8-4fea-a1ce-84570e1398d5")
                        },
                        new
                        {
                            Id = new Guid("6c587bba-0fa1-4d33-bbee-6dcaa58c8efe"),
                            TableNumber = 3,
                            Token = "8bae3cc9-3ec2-42cc-889b-0efc65412001",
                            VenueId = new Guid("6747d4ca-fdd8-4fea-a1ce-84570e1398d5")
                        });
                });

            modelBuilder.Entity("SmartOrder.Data.Models.Venue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Venue Identifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("The city where the venue is located");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date when the venue was added.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Venue name");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Type of the venue(restaurant, pub, cafe, etc.)");

                    b.HasKey("Id");

                    b.ToTable("Venues");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5c6a03f7-073f-42d9-a7c6-2c6d5b8445eb"),
                            City = "София",
                            CreatedOn = new DateTime(2025, 2, 11, 14, 34, 3, 123, DateTimeKind.Utc).AddTicks(6531),
                            Name = "Ресторант Балкан",
                            Type = "Ресторант"
                        },
                        new
                        {
                            Id = new Guid("dbd888de-5c71-4c3b-bb7a-0664f826e8a0"),
                            City = "Пловдив",
                            CreatedOn = new DateTime(2025, 2, 11, 14, 34, 3, 123, DateTimeKind.Utc).AddTicks(6536),
                            Name = "Кафе Арома",
                            Type = "Кафене"
                        },
                        new
                        {
                            Id = new Guid("6747d4ca-fdd8-4fea-a1ce-84570e1398d5"),
                            City = "Варна",
                            CreatedOn = new DateTime(2025, 2, 11, 14, 34, 3, 123, DateTimeKind.Utc).AddTicks(6540),
                            Name = "Бар Нощ",
                            Type = "Бар"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("SmartOrder.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("SmartOrder.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartOrder.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("SmartOrder.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartOrder.Data.Models.ApplicationUser", b =>
                {
                    b.HasOne("SmartOrder.Data.Models.Venue", "Venue")
                        .WithMany("Employees")
                        .HasForeignKey("VenueId");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("SmartOrder.Data.Models.MenuCategory", b =>
                {
                    b.HasOne("SmartOrder.Data.Models.Venue", "Venue")
                        .WithMany("MenuCategories")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("SmartOrder.Data.Models.MenuItem", b =>
                {
                    b.HasOne("SmartOrder.Data.Models.MenuCategory", "MenuCategory")
                        .WithMany("MenuItems")
                        .HasForeignKey("MenuCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuCategory");
                });

            modelBuilder.Entity("SmartOrder.Data.Models.Order", b =>
                {
                    b.HasOne("SmartOrder.Data.Models.Table", "Table")
                        .WithMany("Orders")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Table");
                });

            modelBuilder.Entity("SmartOrder.Data.Models.OrderItem", b =>
                {
                    b.HasOne("SmartOrder.Data.Models.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Order");
                });

            modelBuilder.Entity("SmartOrder.Data.Models.Table", b =>
                {
                    b.HasOne("SmartOrder.Data.Models.Venue", "Venue")
                        .WithMany("Tables")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("SmartOrder.Data.Models.MenuCategory", b =>
                {
                    b.Navigation("MenuItems");
                });

            modelBuilder.Entity("SmartOrder.Data.Models.Order", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("SmartOrder.Data.Models.Table", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("SmartOrder.Data.Models.Venue", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("MenuCategories");

                    b.Navigation("Tables");
                });
#pragma warning restore 612, 618
        }
    }
}
