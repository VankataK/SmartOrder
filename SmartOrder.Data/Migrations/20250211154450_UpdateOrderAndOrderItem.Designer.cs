// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using SmartOrder.Data;

#nullable disable

namespace SmartOrder.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    [Migration("20250211154450_UpdateOrderAndOrderItem")]
    partial class UpdateOrderAndOrderItem
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.10")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Name")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedName")
                        .IsUnique()
                        .HasDatabaseName("RoleNameIndex")
                        .HasFilter("[NormalizedName] IS NOT NULL");

                    b.ToTable("AspNetRoles", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("e55d5c47-bf6d-44e5-b6a5-e070d5b9301b"),
                            Name = "Admin",
                            NormalizedName = "ADMIN"
                        },
                        new
                        {
                            Id = new Guid("1819bf3c-47ba-4fc4-9288-c48d299e3eb2"),
                            Name = "Manager",
                            NormalizedName = "MANAGER"
                        },
                        new
                        {
                            Id = new Guid("51353c58-f8e9-4287-9362-31812572498f"),
                            Name = "Waiter",
                            NormalizedName = "WAITER"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetRoleClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("ClaimType")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("ClaimValue")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserClaims", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderKey")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("ProviderDisplayName")
                        .HasColumnType("nvarchar(max)");

                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("LoginProvider", "ProviderKey");

                    b.HasIndex("UserId");

                    b.ToTable("AspNetUserLogins", (string)null);
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<Guid>("RoleId")
                        .HasColumnType("uniqueidentifier");

                    b.HasKey("UserId", "RoleId");

                    b.HasIndex("RoleId");

                    b.ToTable("AspNetUserRoles", (string)null);

                    b.HasData(
                        new
                        {
                            UserId = new Guid("14836c4b-7428-423e-9026-3c3691705c3d"),
                            RoleId = new Guid("e55d5c47-bf6d-44e5-b6a5-e070d5b9301b")
                        },
                        new
                        {
                            UserId = new Guid("ec848116-c864-4e70-8b11-ee669828d593"),
                            RoleId = new Guid("51353c58-f8e9-4287-9362-31812572498f")
                        },
                        new
                        {
                            UserId = new Guid("da26ba70-ed7f-4d2b-bcb9-f374d81f236d"),
                            RoleId = new Guid("51353c58-f8e9-4287-9362-31812572498f")
                        },
                        new
                        {
                            UserId = new Guid("7541d6ad-8822-4e30-8d7d-347b5ab4cd5c"),
                            RoleId = new Guid("51353c58-f8e9-4287-9362-31812572498f")
                        },
                        new
                        {
                            UserId = new Guid("49f1e679-1c8d-4313-8e3f-1ce11aa2b0ad"),
                            RoleId = new Guid("1819bf3c-47ba-4fc4-9288-c48d299e3eb2")
                        },
                        new
                        {
                            UserId = new Guid("edf6eadd-ff1f-4e27-a0e1-65cde764e76b"),
                            RoleId = new Guid("1819bf3c-47ba-4fc4-9288-c48d299e3eb2")
                        },
                        new
                        {
                            UserId = new Guid("19f45105-e07f-4e15-a0f0-d98c2206f7fc"),
                            RoleId = new Guid("1819bf3c-47ba-4fc4-9288-c48d299e3eb2")
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("uniqueidentifier");

                    b.Property<string>("LoginProvider")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Name")
                        .HasColumnType("nvarchar(450)");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("UserId", "LoginProvider", "Name");

                    b.ToTable("AspNetUserTokens", (string)null);
                });

            modelBuilder.Entity("SmartOrder.Data.Models.ApplicationUser", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier");

                    b.Property<int>("AccessFailedCount")
                        .HasColumnType("int");

                    b.Property<string>("ConcurrencyStamp")
                        .IsConcurrencyToken()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Email")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<bool>("EmailConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("FullName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("User full name.");

                    b.Property<bool>("LockoutEnabled")
                        .HasColumnType("bit");

                    b.Property<DateTimeOffset?>("LockoutEnd")
                        .HasColumnType("datetimeoffset");

                    b.Property<string>("NormalizedEmail")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("NormalizedUserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<string>("PasswordHash")
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("PhoneNumberConfirmed")
                        .HasColumnType("bit");

                    b.Property<string>("SecurityStamp")
                        .HasColumnType("nvarchar(max)");

                    b.Property<bool>("TwoFactorEnabled")
                        .HasColumnType("bit");

                    b.Property<string>("UserName")
                        .HasMaxLength(256)
                        .HasColumnType("nvarchar(256)");

                    b.Property<Guid?>("VenueId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Unique identifier of the site user/staff participate in.");

                    b.HasKey("Id");

                    b.HasIndex("NormalizedEmail")
                        .HasDatabaseName("EmailIndex");

                    b.HasIndex("NormalizedUserName")
                        .IsUnique()
                        .HasDatabaseName("UserNameIndex")
                        .HasFilter("[NormalizedUserName] IS NOT NULL");

                    b.HasIndex("VenueId");

                    b.ToTable("AspNetUsers", (string)null);

                    b.HasData(
                        new
                        {
                            Id = new Guid("ec848116-c864-4e70-8b11-ee669828d593"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "0c4d8b61-8faf-4a40-bb21-e8e03bd1377f",
                            Email = "waiter1@mail.com",
                            EmailConfirmed = false,
                            FullName = "First Waiter",
                            LockoutEnabled = false,
                            NormalizedEmail = "waiter1@mail.com",
                            NormalizedUserName = "waiter1@mail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEEhYD3VjgqqvxYwlM4GvufVjqrB7y1vBDIVpfU0siLBv4VaIJVNtBA/PaPinUU3M4Q==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "waiter1@mail.com",
                            VenueId = new Guid("18234241-24a6-45ab-a595-3241b2441ddc")
                        },
                        new
                        {
                            Id = new Guid("da26ba70-ed7f-4d2b-bcb9-f374d81f236d"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "40eb630e-645a-42a4-986f-27f990e9b6a7",
                            Email = "waiter2@mail.com",
                            EmailConfirmed = false,
                            FullName = "Second Waiter",
                            LockoutEnabled = false,
                            NormalizedEmail = "waiter2@mail.com",
                            NormalizedUserName = "waiter2@mail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEPdYSGVVOK9Y3aci9TI5ZOcXjsTx158iVkLhkFRkCRTpQVy/UIi27o4D1tcYja2OPQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "waiter2@mail.com",
                            VenueId = new Guid("c8426c7c-b859-4237-b5aa-83a609d404e0")
                        },
                        new
                        {
                            Id = new Guid("7541d6ad-8822-4e30-8d7d-347b5ab4cd5c"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a125d2a7-ab8a-464e-bb50-b25a69f69f73",
                            Email = "waiter3@mail.com",
                            EmailConfirmed = false,
                            FullName = "Third Waiter",
                            LockoutEnabled = false,
                            NormalizedEmail = "waiter3@mail.com",
                            NormalizedUserName = "waiter3@mail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEI0cYYsH4pYqC1wwSb+YwqFn/idnRL7QQa1tmrT5AalmUASi+Tp6gQOmFcbkMVpnUw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "waiter3@mail.com",
                            VenueId = new Guid("76efa6d9-0333-4a45-9229-9085f2ebd3ee")
                        },
                        new
                        {
                            Id = new Guid("49f1e679-1c8d-4313-8e3f-1ce11aa2b0ad"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "38872e6b-797b-4dd1-941a-6365675a1c8c",
                            Email = "manager1@mail.com",
                            EmailConfirmed = false,
                            FullName = "First Manager",
                            LockoutEnabled = false,
                            NormalizedEmail = "manager1@mail.com",
                            NormalizedUserName = "manager1@mail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAELTegNcjTFCoZA3pqrf4LeM8aPeKiRYFSoQNOcgpQ//PktxZJSS+jax5pQlF3paHkg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "manager1@mail.com",
                            VenueId = new Guid("18234241-24a6-45ab-a595-3241b2441ddc")
                        },
                        new
                        {
                            Id = new Guid("edf6eadd-ff1f-4e27-a0e1-65cde764e76b"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "21d8e310-984e-4659-8229-4e883593e611",
                            Email = "manager2@mail.com",
                            EmailConfirmed = false,
                            FullName = "Second Manager",
                            LockoutEnabled = false,
                            NormalizedEmail = "manager2@mail.com",
                            NormalizedUserName = "manager2@mail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEAULzst6xSAy17TQ5L2aXRVqBKijF+00OZQ30/esPzHNqbwrJXMXz5t0eyPh4rKAEw==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "manager2@mail.com",
                            VenueId = new Guid("c8426c7c-b859-4237-b5aa-83a609d404e0")
                        },
                        new
                        {
                            Id = new Guid("19f45105-e07f-4e15-a0f0-d98c2206f7fc"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "a06b24cc-30ee-4371-8c67-9312763baed2",
                            Email = "manager3@mail.com",
                            EmailConfirmed = false,
                            FullName = "Third Manager",
                            LockoutEnabled = false,
                            NormalizedEmail = "manager3@mail.com",
                            NormalizedUserName = "manager3@mail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEH3h4rqx00Llze77Z/nCTQSz1AzrMhncCzC/vQ4ICSAvClAPFDGTLvKgLSe12dGqJg==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "manager3@mail.com",
                            VenueId = new Guid("76efa6d9-0333-4a45-9229-9085f2ebd3ee")
                        },
                        new
                        {
                            Id = new Guid("14836c4b-7428-423e-9026-3c3691705c3d"),
                            AccessFailedCount = 0,
                            ConcurrencyStamp = "e06daace-e98d-46a6-adbd-bc12ac54f8b6",
                            Email = "admin@mail.com",
                            EmailConfirmed = false,
                            FullName = "Great Admin",
                            LockoutEnabled = false,
                            NormalizedEmail = "admin@mail.com",
                            NormalizedUserName = "admin@mail.com",
                            PasswordHash = "AQAAAAIAAYagAAAAEJ2wu0G1mJS6pwdyjrhudDivUjjPw1EQURRR7CrbpcZdRKGkbpBTK3Pf/WG9TwhjoQ==",
                            PhoneNumberConfirmed = false,
                            TwoFactorEnabled = false,
                            UserName = "admin@mail.com"
                        });
                });

            modelBuilder.Entity("SmartOrder.Data.Models.MenuCategory", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Menu Category Identifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasComment("Description of the menu category.");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("Name of the menu category.");

                    b.Property<Guid>("VenueId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Venue Identifier");

                    b.HasKey("Id");

                    b.HasIndex("VenueId");

                    b.ToTable("MenuCategories");

                    b.HasData(
                        new
                        {
                            Id = new Guid("057f311f-45da-4027-96a4-ffb7536c5813"),
                            Description = "Вкусни хапки за начало",
                            Title = "Предястия",
                            VenueId = new Guid("18234241-24a6-45ab-a595-3241b2441ddc")
                        },
                        new
                        {
                            Id = new Guid("334d5e72-44da-4b8d-8574-e8df96619840"),
                            Description = "Голямо разнообразие от ястия",
                            Title = "Основни",
                            VenueId = new Guid("18234241-24a6-45ab-a595-3241b2441ddc")
                        },
                        new
                        {
                            Id = new Guid("7bd534cb-ab57-49fb-b704-8e7068c737da"),
                            Description = "Сладки изкушения",
                            Title = "Десерти",
                            VenueId = new Guid("18234241-24a6-45ab-a595-3241b2441ddc")
                        },
                        new
                        {
                            Id = new Guid("b49953cf-4386-49a0-bdd3-21c2a26a8f6c"),
                            Description = "Богато разнообразие от ароматни кафета и освежаващи напитки",
                            Title = "Кафе и напитки",
                            VenueId = new Guid("c8426c7c-b859-4237-b5aa-83a609d404e0")
                        },
                        new
                        {
                            Id = new Guid("b08e0f41-ae28-45d9-954e-8bdfda1ad33a"),
                            Description = "Леко и бързо хапване",
                            Title = "Закуски",
                            VenueId = new Guid("c8426c7c-b859-4237-b5aa-83a609d404e0")
                        },
                        new
                        {
                            Id = new Guid("b7f141b8-94a0-432d-96f4-e6b4a7f550c2"),
                            Description = "Домашно приготвени десерти",
                            Title = "Десерти",
                            VenueId = new Guid("c8426c7c-b859-4237-b5aa-83a609d404e0")
                        },
                        new
                        {
                            Id = new Guid("a5acdabb-cc77-49d0-bb15-07b4d9c07a30"),
                            Description = "Голямо разнообразие от алкохолни изкушения",
                            Title = "Алкохолни напитки",
                            VenueId = new Guid("76efa6d9-0333-4a45-9229-9085f2ebd3ee")
                        },
                        new
                        {
                            Id = new Guid("3ed862ba-4768-470a-b124-b42bab9fdfe6"),
                            Description = "Напитки без алкохол",
                            Title = "Безалкохолни напитки",
                            VenueId = new Guid("76efa6d9-0333-4a45-9229-9085f2ebd3ee")
                        },
                        new
                        {
                            Id = new Guid("9146de41-52bb-49f9-bf73-0ad7647f75ff"),
                            Description = "Съпроводете напитките си с избор от лесни закуски",
                            Title = "Снаксове",
                            VenueId = new Guid("76efa6d9-0333-4a45-9229-9085f2ebd3ee")
                        });
                });

            modelBuilder.Entity("SmartOrder.Data.Models.MenuItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Menu item Identifier");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasMaxLength(250)
                        .HasColumnType("nvarchar(250)")
                        .HasComment("The description of the menu item.");

                    b.Property<string>("ImageUrl")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Optional image Url for the menu item.");

                    b.Property<bool>("IsAvailable")
                        .HasColumnType("bit")
                        .HasComment("Indicator of the item availability.");

                    b.Property<Guid>("MenuCategoryId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Item Category Identifier");

                    b.Property<decimal>("Price")
                        .HasColumnType("decimal(18, 2)")
                        .HasComment("The price of the item.");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("Quantity or portion size (e.g., grams, millilitres, pieces).");

                    b.Property<string>("Tags")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("List of tags describing the item characteristics (e.g., spacy, sweet, vegan)");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("The title of the menu item.");

                    b.HasKey("Id");

                    b.HasIndex("MenuCategoryId");

                    b.ToTable("MenuItems");

                    b.HasData(
                        new
                        {
                            Id = new Guid("9758622c-e453-42e2-8753-3552dd50def8"),
                            Description = "Класическа българска салата с домати, краставици, лук, сирене и зехтин",
                            ImageUrl = "https://upload.wikimedia.org/wikipedia/commons/0/09/Chopska.jpg",
                            IsAvailable = true,
                            MenuCategoryId = new Guid("057f311f-45da-4027-96a4-ffb7536c5813"),
                            Price = 7.50m,
                            Quantity = 1,
                            Tags = "Салата, Вегетарианско",
                            Title = "Шопска салата"
                        },
                        new
                        {
                            Id = new Guid("755b8744-9d6b-4747-acde-910aadec707e"),
                            Description = "Печени гъби с чесън, мащерка и зехтин",
                            ImageUrl = "https://gotvach.bg/files/1200x800/pechurki-maslo-furna.webp",
                            IsAvailable = true,
                            MenuCategoryId = new Guid("057f311f-45da-4027-96a4-ffb7536c5813"),
                            Price = 6.50m,
                            Quantity = 1,
                            Tags = "Гъби, Вегетарианско",
                            Title = "Гъби на фурна"
                        },
                        new
                        {
                            Id = new Guid("5c2d115c-f3c8-4a78-818f-4a9dce0b32e3"),
                            Description = "Запечено свинско месо с картофи и подправки",
                            ImageUrl = "https://matekitchen.com/wp-content/uploads/2023/12/svinsko-s-kartofi.jpg",
                            IsAvailable = true,
                            MenuCategoryId = new Guid("334d5e72-44da-4b8d-8574-e8df96619840"),
                            Price = 14.99m,
                            Quantity = 1,
                            Tags = "Месо, Традиционно",
                            Title = "Свинско с картофи"
                        },
                        new
                        {
                            Id = new Guid("78013a0e-63ac-45a5-a17b-5e159033d26b"),
                            Description = "Пилешко филе с ориз и зеленчуци",
                            ImageUrl = "https://lysp.eu/wp-content/uploads/2022/04/pile-s-oriz-big-1200x675.jpg",
                            IsAvailable = true,
                            MenuCategoryId = new Guid("334d5e72-44da-4b8d-8574-e8df96619840"),
                            Price = 12.50m,
                            Quantity = 1,
                            Tags = "Пиле, Лесно",
                            Title = "Пиле с ориз"
                        },
                        new
                        {
                            Id = new Guid("5b655321-9076-4bdf-9d55-b6d238058cea"),
                            Description = "Пъстърва на скара с лимон и зехтин",
                            ImageUrl = "https://matekitchen.com/wp-content/uploads/2019/09/CG012b_pystyrva-na-skara-s-limon-shalot-i-bilki.jpg",
                            IsAvailable = true,
                            MenuCategoryId = new Guid("334d5e72-44da-4b8d-8574-e8df96619840"),
                            Price = 16.00m,
                            Quantity = 1,
                            Tags = "Риба, Здравословно",
                            Title = "Риба на скара"
                        },
                        new
                        {
                            Id = new Guid("7ed5bb29-e16d-4e99-9dd2-54b3ae8b1167"),
                            Description = "Шоколадова торта с ванилов крем и горски плодове",
                            ImageUrl = "https://sire-media-foxbg.fichub.com/24k_bg/clip-main/643955.1200x675.jpg",
                            IsAvailable = true,
                            MenuCategoryId = new Guid("7bd534cb-ab57-49fb-b704-8e7068c737da"),
                            Price = 6.99m,
                            Quantity = 1,
                            Tags = "Торта, Шоколад",
                            Title = "Шоколадова торта"
                        },
                        new
                        {
                            Id = new Guid("2e795e15-57eb-4968-93cc-7d252cd05d78"),
                            Description = "Класически крем карамел с карамелен сос",
                            ImageUrl = "https://www.kulinarno-joana.com/wp-content/uploads/2011/05/DSC1671-2.jpg",
                            IsAvailable = true,
                            MenuCategoryId = new Guid("7bd534cb-ab57-49fb-b704-8e7068c737da"),
                            Price = 5.50m,
                            Quantity = 1,
                            Tags = "Десерт, Крем",
                            Title = "Крем карамел"
                        },
                        new
                        {
                            Id = new Guid("5de66ef7-1ee4-4aa5-b969-38bf8578a805"),
                            Description = "Палачинки с пълнозърнесто брашно, мед и счукани орехи",
                            ImageUrl = "https://www.bonapeti.bg/uploads/posts/post315.jpg",
                            IsAvailable = true,
                            MenuCategoryId = new Guid("7bd534cb-ab57-49fb-b704-8e7068c737da"),
                            Price = 7.00m,
                            Quantity = 1,
                            Tags = "Палачинки, Сладко",
                            Title = "Палачинки с мед и орехи"
                        },
                        new
                        {
                            Id = new Guid("e889bccb-663d-4094-8947-e568ced530ae"),
                            Description = "Класическо еспресо с богат вкус",
                            ImageUrl = "https://cdn4.focus.bg/fakti/photos/big/83f/kakva-e-razlikata-mejdu-espreso-i-obiknoveno-kafe-1.jpg",
                            IsAvailable = true,
                            MenuCategoryId = new Guid("b49953cf-4386-49a0-bdd3-21c2a26a8f6c"),
                            Price = 2.50m,
                            Quantity = 1,
                            Tags = "Кафе, Класика",
                            Title = "Еспресо"
                        },
                        new
                        {
                            Id = new Guid("c4556933-0de1-4435-8941-efd671a9abba"),
                            Description = "Капучино с кремообразна пяна",
                            ImageUrl = "https://instantpot.bg/wp-content/uploads/instantpot-recepta-capuccino.jpg",
                            IsAvailable = true,
                            MenuCategoryId = new Guid("b49953cf-4386-49a0-bdd3-21c2a26a8f6c"),
                            Price = 3.50m,
                            Quantity = 1,
                            Tags = "Кафе, Мляко",
                            Title = "Капучино"
                        },
                        new
                        {
                            Id = new Guid("a26083b0-c893-413a-9870-e8540c5894e1"),
                            Description = "Избор от зелен, черен и плодов чай",
                            ImageUrl = "https://natural.bg/wp-content/uploads/2022/10/%D0%B1%D0%B8%D0%BB%D0%BA%D0%BE%D0%B2-%D1%87%D0%B0%D0%B9-%D1%81%D1%80%D0%B5%D1%89%D1%83-%D1%81%D1%82%D0%B0%D1%80%D0%B0%D0%B5%D0%B5%D0%BD%D0%B5-1600x1068.jpg",
                            IsAvailable = true,
                            MenuCategoryId = new Guid("b49953cf-4386-49a0-bdd3-21c2a26a8f6c"),
                            Price = 2.00m,
                            Quantity = 1,
                            Tags = "Чай, Без кофеин",
                            Title = "Чай"
                        },
                        new
                        {
                            Id = new Guid("11af540e-8852-42f4-9088-1dc83e3d3c4b"),
                            Description = "Сандвич с прошуто, сирене и рукола",
                            ImageUrl = "https://matekitchen.com/wp-content/uploads/2021/01/sandvich-proshuto-motsarela.jpg",
                            IsAvailable = true,
                            MenuCategoryId = new Guid("b08e0f41-ae28-45d9-954e-8bdfda1ad33a"),
                            Price = 6.50m,
                            Quantity = 1,
                            Tags = "Сандвич, Леко",
                            Title = "Сандвич с прошуто"
                        },
                        new
                        {
                            Id = new Guid("59f82d37-25ca-46ee-a0b9-8e66899826d8"),
                            Description = "Домашен кекс с шоколадови парченца",
                            ImageUrl = "https://gotvach.bg/files/1200x800/parcheta-keks-pudra.webp",
                            IsAvailable = true,
                            MenuCategoryId = new Guid("b08e0f41-ae28-45d9-954e-8bdfda1ad33a"),
                            Price = 3.00m,
                            Quantity = 1,
                            Tags = "Кекс, Сладко",
                            Title = "Кекс"
                        },
                        new
                        {
                            Id = new Guid("48449572-9b0c-499a-a230-b802be7154e0"),
                            Description = "Шоколадова торта с ванилов крем",
                            ImageUrl = "https://sire-media-foxbg.fichub.com/24k_bg/clip-main/643955.1200x675.jpg",
                            IsAvailable = true,
                            MenuCategoryId = new Guid("b7f141b8-94a0-432d-96f4-e6b4a7f550c2"),
                            Price = 5.50m,
                            Quantity = 1,
                            Tags = "Торта, Шоколад",
                            Title = "Шоколадова торта"
                        },
                        new
                        {
                            Id = new Guid("58947931-f1ef-4ec1-a99b-d6f35db5fd77"),
                            Description = "Домашен сладолед с избор от вкусове",
                            ImageUrl = "https://www.lunchbox.eu/wp-content/uploads/2017/06/20170616-DSC_5625.jpg",
                            IsAvailable = true,
                            MenuCategoryId = new Guid("b7f141b8-94a0-432d-96f4-e6b4a7f550c2"),
                            Price = 4.00m,
                            Quantity = 1,
                            Tags = "Сладолед, Освежаващо",
                            Title = "Сладолед"
                        },
                        new
                        {
                            Id = new Guid("80b414bf-a99a-4fb9-8a67-dd314b8fa6ff"),
                            Description = "Българско червено вино, 150 мл",
                            ImageUrl = "",
                            IsAvailable = true,
                            MenuCategoryId = new Guid("a5acdabb-cc77-49d0-bb15-07b4d9c07a30"),
                            Price = 5.00m,
                            Quantity = 1,
                            Tags = "Вино, Алкохол",
                            Title = "Червено вино"
                        },
                        new
                        {
                            Id = new Guid("1a6ba324-6e49-454c-97cd-3c3fc55123c2"),
                            Description = "Класически коктейл с текила и лайм",
                            ImageUrl = "",
                            IsAvailable = true,
                            MenuCategoryId = new Guid("a5acdabb-cc77-49d0-bb15-07b4d9c07a30"),
                            Price = 8.00m,
                            Quantity = 1,
                            Tags = "Коктейл, Алкохол",
                            Title = "Маргарита"
                        },
                        new
                        {
                            Id = new Guid("35cd2ca6-b84d-4e03-baca-fcca8f63dd24"),
                            Description = "Пресно изстискан сок от портокал",
                            ImageUrl = "",
                            IsAvailable = true,
                            MenuCategoryId = new Guid("3ed862ba-4768-470a-b124-b42bab9fdfe6"),
                            Price = 3.50m,
                            Quantity = 1,
                            Tags = "Сок, Безалкохолно",
                            Title = "Сок от портокал"
                        },
                        new
                        {
                            Id = new Guid("1e27e8b2-71f1-4f01-9b45-3866782117b6"),
                            Description = "Домашна лимонада с мента и лимон",
                            ImageUrl = "",
                            IsAvailable = true,
                            MenuCategoryId = new Guid("3ed862ba-4768-470a-b124-b42bab9fdfe6"),
                            Price = 4.00m,
                            Quantity = 1,
                            Tags = "Лимонада, Освежаващо",
                            Title = "Лимонада"
                        },
                        new
                        {
                            Id = new Guid("149a8c42-ebfa-4819-904a-3f5c6598f29b"),
                            Description = "Хрупкав чипс със сол",
                            ImageUrl = "",
                            IsAvailable = true,
                            MenuCategoryId = new Guid("9146de41-52bb-49f9-bf73-0ad7647f75ff"),
                            Price = 2.00m,
                            Quantity = 1,
                            Tags = "Чипс, Леко",
                            Title = "Чипс"
                        },
                        new
                        {
                            Id = new Guid("ef91bdc7-357b-4cfd-9eec-f81165171697"),
                            Description = "Сирене и месни деликатеси",
                            ImageUrl = "",
                            IsAvailable = true,
                            MenuCategoryId = new Guid("9146de41-52bb-49f9-bf73-0ad7647f75ff"),
                            Price = 10.00m,
                            Quantity = 1,
                            Tags = "Сирене, Месо",
                            Title = "Плато с месо и сирена"
                        });
                });

            modelBuilder.Entity("SmartOrder.Data.Models.Order", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Order Identifier");

                    b.Property<Guid?>("AssignedWaiterId")
                        .IsRequired()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Assigned Waiter Identifier");

                    b.Property<int>("Status")
                        .HasColumnType("int")
                        .HasComment("Status of the order {e.g., Pending, Completed, Cancelled, …}");

                    b.Property<Guid>("TableId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Order table Identifier");

                    b.HasKey("Id");

                    b.HasIndex("AssignedWaiterId");

                    b.HasIndex("TableId");

                    b.ToTable("Orders");
                });

            modelBuilder.Entity("SmartOrder.Data.Models.OrderItem", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Order item Identifier");

                    b.Property<bool>("IsServed")
                        .HasColumnType("bit")
                        .HasComment("Is item served by waiter");

                    b.Property<Guid>("MenuItemId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Menu Item Identifier");

                    b.Property<string>("Notes")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Additional notes or comments about the item.");

                    b.Property<Guid>("OrderId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Order Identifier");

                    b.Property<int>("Quantity")
                        .HasColumnType("int")
                        .HasComment("Quantity of the item ordered.");

                    b.HasKey("Id");

                    b.HasIndex("MenuItemId");

                    b.HasIndex("OrderId");

                    b.ToTable("OrderItems");
                });

            modelBuilder.Entity("SmartOrder.Data.Models.Table", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Table Identifier");

                    b.Property<int>("TableNumber")
                        .HasColumnType("int")
                        .HasComment("The number of the table");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)")
                        .HasComment("Unique long length token for the table.");

                    b.Property<Guid>("VenueId")
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Venue Identifier");

                    b.HasKey("Id");

                    b.HasIndex("VenueId");

                    b.ToTable("Tables");

                    b.HasData(
                        new
                        {
                            Id = new Guid("5fb683d0-6dd9-4e21-a0f3-b86a1758c8b5"),
                            TableNumber = 1,
                            Token = "e9e082a1-3951-449b-96e8-1b7a80f97a7d",
                            VenueId = new Guid("18234241-24a6-45ab-a595-3241b2441ddc")
                        },
                        new
                        {
                            Id = new Guid("b80b7351-d936-4ce5-be7d-cc0ae1ce4cc2"),
                            TableNumber = 2,
                            Token = "9a1ca452-97c6-4936-923b-473d847d4d15",
                            VenueId = new Guid("18234241-24a6-45ab-a595-3241b2441ddc")
                        },
                        new
                        {
                            Id = new Guid("3c549941-df9f-4e85-bb55-4101752c307a"),
                            TableNumber = 3,
                            Token = "e2701b57-aade-4246-92d2-8bb44ec63a8c",
                            VenueId = new Guid("18234241-24a6-45ab-a595-3241b2441ddc")
                        },
                        new
                        {
                            Id = new Guid("b2e54e77-8f49-4c12-86e9-6d2469f5778d"),
                            TableNumber = 1,
                            Token = "ee12b6a9-d0e1-4018-bcbf-0e75d64e8ca4",
                            VenueId = new Guid("c8426c7c-b859-4237-b5aa-83a609d404e0")
                        },
                        new
                        {
                            Id = new Guid("eeba6c76-219c-45f4-80e2-d279822958ba"),
                            TableNumber = 2,
                            Token = "400bb710-32f0-4e64-8501-621f305ec448",
                            VenueId = new Guid("c8426c7c-b859-4237-b5aa-83a609d404e0")
                        },
                        new
                        {
                            Id = new Guid("d30e3a45-b456-4f17-8983-7c640e59f00e"),
                            TableNumber = 3,
                            Token = "48a58ead-39f8-49dc-b6fb-5b86f4151915",
                            VenueId = new Guid("c8426c7c-b859-4237-b5aa-83a609d404e0")
                        },
                        new
                        {
                            Id = new Guid("a85440af-23c5-45b8-8a94-a46deea09e00"),
                            TableNumber = 1,
                            Token = "7658b410-d7b2-4ed8-af42-b4609575d7fb",
                            VenueId = new Guid("76efa6d9-0333-4a45-9229-9085f2ebd3ee")
                        },
                        new
                        {
                            Id = new Guid("b326e830-b028-4150-88e2-fefba1e7d81c"),
                            TableNumber = 2,
                            Token = "8e6cf5cf-ad2e-4675-9b61-05bf336d3435",
                            VenueId = new Guid("76efa6d9-0333-4a45-9229-9085f2ebd3ee")
                        },
                        new
                        {
                            Id = new Guid("6584dd8d-122c-47d9-9d95-975e8d4111fd"),
                            TableNumber = 3,
                            Token = "524156f9-3f0b-400e-bb16-dc7d8f5d8ea6",
                            VenueId = new Guid("76efa6d9-0333-4a45-9229-9085f2ebd3ee")
                        });
                });

            modelBuilder.Entity("SmartOrder.Data.Models.Venue", b =>
                {
                    b.Property<Guid>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("uniqueidentifier")
                        .HasComment("Venue Identifier");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasMaxLength(20)
                        .HasColumnType("nvarchar(20)")
                        .HasComment("The city where the venue is located");

                    b.Property<DateTime>("CreatedOn")
                        .HasColumnType("datetime2")
                        .HasComment("Date when the venue was added.");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)")
                        .HasComment("Venue name");

                    b.Property<string>("Type")
                        .IsRequired()
                        .HasMaxLength(30)
                        .HasColumnType("nvarchar(30)")
                        .HasComment("Type of the venue(restaurant, pub, cafe, etc.)");

                    b.HasKey("Id");

                    b.ToTable("Venues");

                    b.HasData(
                        new
                        {
                            Id = new Guid("18234241-24a6-45ab-a595-3241b2441ddc"),
                            City = "София",
                            CreatedOn = new DateTime(2025, 2, 11, 15, 44, 49, 202, DateTimeKind.Utc).AddTicks(1196),
                            Name = "Ресторант Балкан",
                            Type = "Ресторант"
                        },
                        new
                        {
                            Id = new Guid("c8426c7c-b859-4237-b5aa-83a609d404e0"),
                            City = "Пловдив",
                            CreatedOn = new DateTime(2025, 2, 11, 15, 44, 49, 202, DateTimeKind.Utc).AddTicks(1200),
                            Name = "Кафе Арома",
                            Type = "Кафене"
                        },
                        new
                        {
                            Id = new Guid("76efa6d9-0333-4a45-9229-9085f2ebd3ee"),
                            City = "Варна",
                            CreatedOn = new DateTime(2025, 2, 11, 15, 44, 49, 202, DateTimeKind.Utc).AddTicks(1203),
                            Name = "Бар Нощ",
                            Type = "Бар"
                        });
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityRoleClaim<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserClaim<System.Guid>", b =>
                {
                    b.HasOne("SmartOrder.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserLogin<System.Guid>", b =>
                {
                    b.HasOne("SmartOrder.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserRole<System.Guid>", b =>
                {
                    b.HasOne("Microsoft.AspNetCore.Identity.IdentityRole<System.Guid>", null)
                        .WithMany()
                        .HasForeignKey("RoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartOrder.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Microsoft.AspNetCore.Identity.IdentityUserToken<System.Guid>", b =>
                {
                    b.HasOne("SmartOrder.Data.Models.ApplicationUser", null)
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("SmartOrder.Data.Models.ApplicationUser", b =>
                {
                    b.HasOne("SmartOrder.Data.Models.Venue", "Venue")
                        .WithMany("Employees")
                        .HasForeignKey("VenueId");

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("SmartOrder.Data.Models.MenuCategory", b =>
                {
                    b.HasOne("SmartOrder.Data.Models.Venue", "Venue")
                        .WithMany("MenuCategories")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("SmartOrder.Data.Models.MenuItem", b =>
                {
                    b.HasOne("SmartOrder.Data.Models.MenuCategory", "MenuCategory")
                        .WithMany("MenuItems")
                        .HasForeignKey("MenuCategoryId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuCategory");
                });

            modelBuilder.Entity("SmartOrder.Data.Models.Order", b =>
                {
                    b.HasOne("SmartOrder.Data.Models.ApplicationUser", "AssignedWaiter")
                        .WithMany()
                        .HasForeignKey("AssignedWaiterId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartOrder.Data.Models.Table", "Table")
                        .WithMany("Orders")
                        .HasForeignKey("TableId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("AssignedWaiter");

                    b.Navigation("Table");
                });

            modelBuilder.Entity("SmartOrder.Data.Models.OrderItem", b =>
                {
                    b.HasOne("SmartOrder.Data.Models.MenuItem", "MenuItem")
                        .WithMany()
                        .HasForeignKey("MenuItemId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("SmartOrder.Data.Models.Order", "Order")
                        .WithMany("Items")
                        .HasForeignKey("OrderId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("MenuItem");

                    b.Navigation("Order");
                });

            modelBuilder.Entity("SmartOrder.Data.Models.Table", b =>
                {
                    b.HasOne("SmartOrder.Data.Models.Venue", "Venue")
                        .WithMany("Tables")
                        .HasForeignKey("VenueId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Venue");
                });

            modelBuilder.Entity("SmartOrder.Data.Models.MenuCategory", b =>
                {
                    b.Navigation("MenuItems");
                });

            modelBuilder.Entity("SmartOrder.Data.Models.Order", b =>
                {
                    b.Navigation("Items");
                });

            modelBuilder.Entity("SmartOrder.Data.Models.Table", b =>
                {
                    b.Navigation("Orders");
                });

            modelBuilder.Entity("SmartOrder.Data.Models.Venue", b =>
                {
                    b.Navigation("Employees");

                    b.Navigation("MenuCategories");

                    b.Navigation("Tables");
                });
#pragma warning restore 612, 618
        }
    }
}
